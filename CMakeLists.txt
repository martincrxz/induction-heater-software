cmake_minimum_required(VERSION 3.1.0)
project(TrabajoProfesional)
# Cambiar esto a false cuando se haga el release
set(DEBUG_MODE TRUE)

# Definición de macros de compilación para usuarios MacOs.
if(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	message("[INFO] COMPILING FOR MACOS")
	set(CMAKE_PREFIX_PATH "/usr/local/Cellar/qt/5.13.0/")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	message("[INFO] COMPILING FOR WINDOWS")
	set(QT5_DLL_DIR "C:\\Qt\\5.12.5\\msvc2017\\bin")
	set(Qt5_DIR "C:\\Qt\\5.12.5\\msvc2017\\lib\\cmake\\Qt5")
	set(IS_WINDOWS TRUE)
else()
	message("[INFO] COMPILING FOR LINUX")
endif()

if(IS_WINDOWS)
	message("[INFO] Copying .dll files to the current directory")
	if(DEBUG_MODE)
		file(COPY ${QT5_DLL_DIR}/Qt5Cored.dll DESTINATION ./Debug)
		file(COPY ${QT5_DLL_DIR}/Qt5Chartsd.dll DESTINATION ./Debug)
		file(COPY ${QT5_DLL_DIR}/Qt5SerialPortd.dll DESTINATION ./Debug)
		file(COPY ${QT5_DLL_DIR}/Qt5Guid.dll DESTINATION ./Debug)
		file(COPY ${QT5_DLL_DIR}/Qt5Widgetsd.dll DESTINATION ./Debug)
	else()
		file(COPY ${QT5_DLL_DIR}/Qt5Core.dll DESTINATION ./)
		file(COPY ${QT5_DLL_DIR}/Qt5Charts.dll DESTINATION ./)
		file(COPY ${QT5_DLL_DIR}/Qt5SerialPort.dll DESTINATION ./)
		file(COPY ${QT5_DLL_DIR}/Qt5Gui.dll DESTINATION ./)
		file(COPY ${QT5_DLL_DIR}/Qt5Widgets.dll DESTINATION ./)
	endif()
else()
	if(DEBUG_MODE)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -std=c++11 -ggdb3 -Wall -Werror -pedantic -pthread")
	else()
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -std=c++11 -Wall -Werror -pedantic -pthread")
	endif()
endif()
message("[INFO] Setting flags = '${CMAKE_CXX_FLAGS}'")

message("[INFO] Including portable-endian project")
add_subdirectory(${CMAKE_SOURCE_DIR}/libs/portable-endian)

# Adding autogenerated portable-endian.h file to the include directories
message("[INFO] Adding '${CMAKE_BINARY_DIR}/libs/portable-endian' as include directory")
include_directories(${CMAKE_BINARY_DIR}/libs/portable-endian)

message("[INFO] Adding '${CMAKE_SOURCE_DIR}/libs' as include directory")
include_directories(${CMAKE_SOURCE_DIR}/libs)

message("[INFO] Loading sources")
file(GLOB_RECURSE SOURCES RELATIVE ${CMAKE_SOURCE_DIR} "src/*.cpp" "src/*.h" "libs/*.h" "libs/*.cpp")

message("[INFO] Loading sources of QT")

# Find the QtWidgets library
find_package(Qt5 COMPONENTS Core Widgets Charts SerialPort REQUIRED)

qt5_wrap_ui(UIS_HEADERS
        src/view/auto_tunning_tab_view.ui
        src/view/automatic_control_tab_view.ui
        src/view/chart_tab_view.ui
        src/view/equipment_status_view.ui
        src/view/general_view.ui
        src/view/manual_power_control_view.ui
        )
# Instruct CMake to run moc automatically when neededcd
set(CMAKE_AUTOMOC ON)
# Create code from a list of Qt designer ui files
set(CMAKE_AUTORCC ON)

# Adding directory with the autogenerated headers as include directory
message("[INFO] Adding '${PROJECT_BINARY_DIR}' as include directory")
include_directories(${PROJECT_BINARY_DIR})

message("[INFO] Headers autogenerated: ${UIS_HEADERS}")

file(GLOB RESOURCES ${CMAKE_SOURCE_DIR}
        "assets/resources.qrc")

# Tell CMake to create the helloworld executable
add_executable(application ${SOURCES} ${UIS_HEADERS} ${RESOURCES})

message("[INFO] Add Qt components to the target link libraries")
if(IS_WINDOWS)
	message("[INFO] Adding ws2_32 to the target link libraries")
	target_link_libraries(application ws2_32 Qt5::Core Qt5::Widgets Qt5::Charts Qt5::SerialPort)
else()
	target_link_libraries(application Qt5::Core Qt5::Widgets Qt5::Charts Qt5::SerialPort)

endif()
# Install phase (commented until necessary)
#file(COPY assets DESTINATION ./)
#file(COPY serverConfig.yaml DESTINATION ./)
#file(COPY defaultWeapons.yaml DESTINATION ./)
#file(COPY res DESTINATION ./)

#message("[INFO] Adding Installation directives")
#INSTALL(TARGETS worms_client worms_server worms_editor DESTINATION /usr/bin)
#INSTALL(DIRECTORY assets DESTINATION /var/Worms)
#INSTALL(DIRECTORY res DESTINATION /var/Worms)
#INSTALL(FILES defaultWeapons.yaml serverConfig.yaml DESTINATION /etc/Worms)
